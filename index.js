// index.js
import express from "express";
import mongoose from "mongoose";
import cors from "cors";
import dotenv from "dotenv";
import fileUpload from "express-fileupload";
import admin from "firebase-admin"; // Firebase Admin SDK
import bodyParser from "body-parser"; // Body-parser for JSON parsing
import cron from "node-cron"; // Node-cron for scheduling tasks
import fs from "fs"; // File system for token storage (for this example)

// Routes imports
import categoryRoutes from "./routes/categoryRoutes.js";
import shayariRoutes from "./routes/shayariRoutes.js";
import adminroutes from "./routes/authroutes.js";
import dashboardRoutes from "./routes/dashboardRoutes.js";
import usersRoutes from "./routes/userroutes.js";
import usersShayarisRoutes from "./routes/usersShayarisroutes.js";

// Import your Shayari model (assuming it exists)
// Make sure the path is correct for your project structure
import Shayari from "./models/Shayari.js"; // <-- ‡§Ø‡§π‡§æ‡§Å ‡§Ö‡§™‡§®‡•Ä ‡§∂‡§æ‡§Ø‡§∞‡•Ä ‡§Æ‡•â‡§°‡§≤ ‡§´‡§æ‡§á‡§≤ ‡§ï‡§æ ‡§™‡§æ‡§• ‡§¶‡•á‡§Ç

// Load environment variables
dotenv.config();

// Load Firebase service account key
import serviceAccount from "./serviceAccountKey.json" assert { type: "json" }; // <-- 'assert { type: "json" }' ES Modules ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à

// Initialize Firebase Admin SDK
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
});

const app = express();

// Configure CORS
app.use(
  cors({
    origin: "*", // ‡§∏‡§≠‡•Ä ‡§ì‡§∞‡§ø‡§ú‡§ø‡§® ‡§∏‡•á ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§§‡§æ ‡§π‡•à
    credentials: true,
  })
);

// Middleware
app.use(express.json()); // JSON ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§¨‡•â‡§°‡•Ä ‡§ï‡•ã ‡§™‡§æ‡§∞‡•ç‡§∏ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
app.use(fileUpload()); // ‡§´‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
app.use(bodyParser.json()); // FCM ‡§ü‡•ã‡§ï‡§® ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è JSON ‡§¨‡•â‡§°‡•Ä ‡§ï‡•ã ‡§™‡§æ‡§∞‡•ç‡§∏ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è

// --- FCM ‡§ü‡•ã‡§ï‡§® ‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§ú (‡§á‡§∏ ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§æ‡§á‡§≤ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó) ---
// ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® (production) ‡§Æ‡•á‡§Ç, ‡§Ü‡§™‡§ï‡•ã ‡§á‡§® ‡§ü‡•ã‡§ï‡§® ‡§ï‡•ã ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ (‡§ú‡•à‡§∏‡•á MongoDB) ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§
const FCM_TOKENS_FILE = "fcm_tokens.json";
let fcmTokens = [];

// ‡§´‡§æ‡§á‡§≤ ‡§∏‡•á FCM ‡§ü‡•ã‡§ï‡§® ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§¨ ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã
if (fs.existsSync(FCM_TOKENS_FILE)) {
  try {
    fcmTokens = JSON.parse(fs.readFileSync(FCM_TOKENS_FILE, "utf8"));
    console.log("Loaded FCM tokens:", fcmTokens.length);
  } catch (error) {
    console.error("Error loading FCM tokens from file:", error);
    fcmTokens = []; // ‡§Ö‡§ó‡§∞ ‡§´‡§æ‡§á‡§≤ corrupt ‡§π‡•à ‡§§‡•ã ‡§ñ‡§æ‡§≤‡•Ä ‡§è‡§∞‡•á ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
  }
}

// FCM ‡§ü‡•ã‡§ï‡§® ‡§ï‡•ã ‡§´‡§æ‡§á‡§≤ ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç
const saveTokens = () => {
  try {
    fs.writeFileSync(
      FCM_TOKENS_FILE,
      JSON.stringify(fcmTokens, null, 2),
      "utf8"
    );
  } catch (error) {
    console.error("Error saving FCM tokens to file:", error);
  }
};

// Connect to MongoDB
mongoose
  .connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("MongoDB connected"))
  .catch((err) => console.log("MongoDB connection error:", err));

// --- API ‡§è‡§Ç‡§°‡§™‡•â‡§á‡§Ç‡§ü: FCM ‡§ü‡•ã‡§ï‡§® ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç ---
// ‡§Ø‡§π ‡§è‡§Ç‡§°‡§™‡•â‡§á‡§Ç‡§ü ‡§Ü‡§™‡§ï‡•á React Native ‡§ê‡§™ ‡§∏‡•á FCM ‡§ü‡•ã‡§ï‡§® ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§ó‡§æ
app.post("/api/register-fcm-token", (req, res) => {
  const { fcmToken, userId } = req.body; // userId ‡§ï‡•ã ‡§Ü‡§™‡§ï‡•á ‡§ê‡§™ ‡§∏‡•á ‡§≠‡•á‡§ú‡§æ ‡§ú‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è

  if (!fcmToken) {
    return res.status(400).json({ error: "FCM ‡§ü‡•ã‡§ï‡§® ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§" });
  }

  // ‡§°‡•Å‡§™‡•ç‡§≤‡•Ä‡§ï‡•á‡§ü ‡§ü‡•ã‡§ï‡§® ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç ‡§î‡§∞ ‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§ü‡•ã‡§ï‡§® ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
  const existingTokenIndex = fcmTokens.findIndex(
    (t) => t.fcmToken === fcmToken
  );
  if (existingTokenIndex === -1) {
    fcmTokens.push({
      fcmToken,
      userId,
      registeredAt: new Date().toISOString(),
    });
    saveTokens();
    console.log(
      `‡§®‡§Ø‡§æ FCM ‡§ü‡•ã‡§ï‡§® ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§π‡•Å‡§Ü: ${fcmToken} (‡§Ø‡•Ç‡§ú‡§º‡§∞: ${userId || "‡§Ö‡§ú‡•ç‡§û‡§æ‡§§"})`
    );
    res.status(200).json({ message: "FCM ‡§ü‡•ã‡§ï‡§® ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§π‡•Å‡§Ü‡•§" });
  } else {
    // ‡§Ö‡§ó‡§∞ ‡§ü‡•ã‡§ï‡§® ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç (‡§ú‡•à‡§∏‡•á lastSeen ‡§ü‡§æ‡§á‡§Æ)
    fcmTokens[existingTokenIndex].registeredAt = new Date().toISOString();
    // ‡§Ü‡§™ ‡§ö‡§æ‡§π‡•á‡§Ç ‡§§‡•ã userId ‡§≠‡•Ä ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§Ö‡§ó‡§∞ ‡§Ø‡§π ‡§¨‡§¶‡§≤‡§§‡§æ ‡§π‡•à
    if (userId && fcmTokens[existingTokenIndex].userId !== userId) {
      fcmTokens[existingTokenIndex].userId = userId;
    }
    saveTokens();
    res
      .status(200)
      .json({ message: "FCM ‡§ü‡•ã‡§ï‡§® ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à ‡§î‡§∞ ‡§Ö‡§™‡§°‡•á‡§ü ‡§π‡•Å‡§Ü‡•§" });
  }
});

// --- ‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ---
// ‡§Ö‡§¨ ‡§Ø‡§π ‡§™‡•Ç‡§∞‡•Ä ‡§∂‡§æ‡§Ø‡§∞‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§î‡§∞ ‡§∞‡•à‡§Ç‡§°‡§Æ ‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏ ‡§≠‡•Ä ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
async function sendShayariNotification(
  token,
  title,
  body,
  dataPayload = {},
  allShayaris = [],
  randomIndex = -1
) {
  // FCM ‡§°‡•á‡§ü‡§æ ‡§™‡•á‡§≤‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§ï‡•á‡§µ‡§≤ ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ø‡§Ç‡§ó ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§á‡§∏‡§≤‡§ø‡§è ‡§è‡§∞‡•á ‡§ï‡•ã JSON ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ø‡§Ç‡§ó‡§ø‡§´‡§º‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç
  const message = {
    notification: {
      title: title,
      body: body,
    },
    data: {
      ...dataPayload,
      type: "daily_shayari", // ‡§ï‡§∏‡•ç‡§ü‡§Æ ‡§°‡•á‡§ü‡§æ ‡§ú‡•ã ‡§ê‡§™ ‡§Æ‡•á‡§Ç ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
      // all_shayaris: JSON.stringify(
      //   allShayaris.map((s) => ({ _id: s._id, content: s.content }))
      // ), // ‡§ï‡•á‡§µ‡§≤ ID ‡§î‡§∞ content ‡§≠‡•á‡§ú‡•á‡§Ç
      random_index: String(randomIndex), // ‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏ ‡§ï‡•ã ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡•á‡§Ç
    },
    token: token,
  };

  try {
    const response = await admin.messaging().send(message);
    console.log("‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§≠‡•á‡§ú‡§æ:", response);
  } catch (error) {
    console.error("‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø:", error);
    if (
      error.code === "messaging/invalid-registration-token" ||
      error.code === "messaging/registration-token-not-registered"
    ) {
      console.log(`‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø/‡§Ö‡§™‡•ç‡§∞‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§ü‡•ã‡§ï‡§® ‡§π‡§ü‡§æ‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à: ${token}`);
      fcmTokens = fcmTokens.filter((t) => t.fcmToken !== token);
      saveTokens();
    }
  }
}

// --- ‡§π‡§∞ ‡§Æ‡§ø‡§®‡§ü ‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ç‡§∞‡•â‡§® ‡§ú‡•â‡§¨ ---
// '* * * * *' ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§π‡•à ‡§π‡§∞ ‡§Æ‡§ø‡§®‡§ü ‡§ö‡§≤‡•á‡§ó‡§æ
cron.schedule("* * * * *", async () => {
  console.log("‡§π‡§∞ ‡§Æ‡§ø‡§®‡§ü ‡§ï‡•Ä ‡§∂‡§æ‡§Ø‡§∞‡•Ä ‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§≠‡•á‡§ú ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...");
  if (fcmTokens.length === 0) {
    console.log("‡§ï‡•ã‡§à FCM ‡§ü‡•ã‡§ï‡§® ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§");
    return;
  }

  try {
    const currentHour = new Date().getHours();
    console.log(currentHour);

    let notificationTitle = "‡§Ü‡§ú ‡§ï‡•Ä ‡§∂‡§æ‡§Ø‡§∞‡•Ä üåü"; // ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§ü‡§æ‡§á‡§ü‡§≤

    if (currentHour === 10) {
      // ‡§∏‡•Å‡§¨‡§π 10 ‡§¨‡§ú‡•á
      notificationTitle = "Good Morning! ‚òÄÔ∏è";
    } else if (currentHour === 21) {
      // ‡§∞‡§æ‡§§ 9 ‡§¨‡§ú‡•á (21:00)
      notificationTitle = "Good Night! üåô";
    }
    // MongoDB ‡§∏‡•á ‡§∏‡§≠‡•Ä ‡§∂‡§æ‡§Ø‡§∞‡§ø‡§Ø‡§æ‡§Å ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
    const allShayaris = await Shayari.find({}); // ‡§∏‡§≠‡•Ä ‡§∂‡§æ‡§Ø‡§∞‡§ø‡§Ø‡§æ‡§Å ‡§´‡•á‡§ö ‡§ï‡§∞‡•á‡§Ç
    const count = allShayaris.length;
    console.log(count);

    if (count === 0) {
      console.log("‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§∂‡§æ‡§Ø‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§");
      return;
    }

    const random = Math.floor(Math.random() * count);
    const randomShayari = allShayaris[random]; // ‡§è‡§∞‡•á ‡§∏‡•á ‡§∞‡•à‡§Ç‡§°‡§Æ ‡§∂‡§æ‡§Ø‡§∞‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç
    console.log("random", random);

    if (randomShayari) {
      const shayariText = randomShayari.text || "‡§Ü‡§ú ‡§ï‡•Ä ‡§ñ‡•Ç‡§¨‡§∏‡•Ç‡§∞‡§§ ‡§∂‡§æ‡§Ø‡§∞‡•Ä!"; // ‡§Ö‡§™‡§®‡•Ä ‡§∂‡§æ‡§Ø‡§∞‡•Ä ‡§Æ‡•â‡§°‡§≤ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§´‡•Ä‡§≤‡•ç‡§° ‡§®‡•á‡§Æ ‡§¨‡§¶‡§≤‡•á‡§Ç
      const shayariId = randomShayari._id.toString(); // ‡§∂‡§æ‡§Ø‡§∞‡•Ä ID ‡§≠‡•á‡§ú‡•á‡§Ç

      // ‡§∏‡§≠‡•Ä ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§ø‡§è ‡§ó‡§è ‡§ü‡•ã‡§ï‡§® ‡§ï‡•ã ‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§≠‡•á‡§ú‡•á‡§Ç
      for (const user of fcmTokens) {
        await sendShayariNotification(
          user.fcmToken,
          notificationTitle,
          shayariText,
          { shayari_id: shayariId },
          // allShayaris, // ‡§™‡•Ç‡§∞‡•Ä ‡§∂‡§æ‡§Ø‡§∞‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§≠‡•á‡§ú‡•á‡§Ç
          random
        );
      }
    } else {
      console.log("‡§∞‡•à‡§Ç‡§°‡§Æ ‡§∂‡§æ‡§Ø‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤ ‡§™‡§æ‡§à‡•§");
    }
  } catch (error) {
    console.error("‡§ï‡•ç‡§∞‡•â‡§® ‡§ú‡•â‡§¨ ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø:", error);
  }
});

// Routes (‡§Ü‡§™‡§ï‡•á ‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§∞‡•Ç‡§ü‡•ç‡§∏)
app.use("/api/admin", adminroutes);
app.use("/api/dashboard", dashboardRoutes);
app.use("/api/categories", categoryRoutes);
app.use("/api/shayaris", shayariRoutes);
app.use("/api/users/auth", usersRoutes);
app.use("/api/users/shayaris", usersShayarisRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
